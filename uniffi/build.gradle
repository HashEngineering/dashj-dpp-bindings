//buildscript {
//    ext.kotlin_version = '1.5.31'
//    ext.dashj_version = '19.1-CJ-SNAPSHOT'
//    ext.dpp_version = '0.24-SNAPSHOT'
//    repositories {
//        mavenCentral()
//        mavenLocal()
//        maven { url "https://plugins.gradle.org/m2/" }
//    }
//    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
//        classpath "org.jlleitschuh.gradle:ktlint-gradle:8.2.0"
//    }
//}

plugins {
    id 'kotlin'
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
    id 'maven'
    id 'signing'
    id 'java'
    id('io.gitlab.arturbosch.detekt').version("1.1.1")
}

//allprojects {
//    repositories {
//        mavenLocal()
//        mavenCentral()
//        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'}
//    }
//       tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
//        kotlinOptions {
//            freeCompilerArgs += [
//                "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes",
//            ]
//        }
//    }
//}




repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'net.java.dev.jna:jna:5.8.0' // Use the latest version

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    testImplementation 'org.easymock:easymock:4.3'
}





group 'org.dashj'
version '0.25-SNAPSHOT'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.dashj.platform:dpp:0.24-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

task buildRustLibrary {
//    doLast {
//        exec {
//            workingDir './src/main/rust'
//            commandLine 'cargo', 'build', '--release'
//        }
//    }
}

// Path to .udl file for Uniffi
def udlFilePath = 'src/dpp.udl'

// Define a task for generating UniFFI bindings
task generateUniFFIBindings(type: Exec) {
    workingDir "${project.projectDir}/src/main/rust"

    // Runs the bindings generation, note that you must have uniffi-bindgen installed and in your PATH environment variable
    commandLine 'cargo', 'run', '--features=uniffi/cli', '--bin', 'uniffi-bindgen', 'generate', udlFilePath, '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/main/java"
    commandLine 'cp', 'target/release/libdpp.so', '../jniLibs/libuniffi_kotlin_dpp.so'
}

// Make the Kotlin compile task depend on the Uniffi generation task
compileKotlin.dependsOn generateUniFFIBindings

// Add the generated source directory to the source sets
sourceSets {
    main.java.srcDirs += "${buildDir}/generated/source/uniffi/main/java"
}

tasks.withType(Test) {
    systemProperty "java.library.path", "./src/main/rust/target/release"
    systemProperty "jna.library.path", "./src/main/jniLibs"

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    tasks.withType(Sign)*.enabled = false
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            from components.java
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

assemble.dependsOn(publishToMavenLocal)
assemble.dependsOn(buildRustLibrary)

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}


group 'org.dashj.dpp'
version '0.25-SNAPSHOT'

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            pom.project {
                name 'DashJ DPP'
                packaging 'jar'
                groupId 'org.dashj'
                artifactId 'dashj-dpp-bindings'
                version version
                description 'Dash DPP Library'
                url 'https://github.com/hashengineering/dashj-merk'

                scm {
                    connection 'scm:svn:https://github.com/hashengineering/dashj-merk'
                    developerConnection 'scm:svn:https://github.com/hashengineering/dashj-merk'
                    url 'https://github.com/hashengineering/dashj-merk'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'hashengineering'
                        name 'HashEngineering'
                        email 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
}

apply from: '../ktlint.gradle'
